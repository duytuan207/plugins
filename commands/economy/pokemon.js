import fs from 'fs';
import axios from 'axios';
import { join } from 'path';

const config = {
  name: "pokemon",
  aliases: ["poke"],
  description: "Play Pok√©mon game.",
  usage: "",
  cooldown: 5,
  credits: "Dymyrius, (Duy Tu·∫•n vi·ªát h√≥a)"
};

const langData = {
  "en_US": {
    "pokemon.battleWin": "Congratulations! You defeated {opponent} and won the battle!",
    "pokemon.challenge": "You've challenged {opponent} to a Pok√©mon battle! Place your bet using `pokemon challenge @user <betAmount>`.",
    "pokemon.noPok√©mon": "You don't have any Pok√©mon. Use `pokemon buy` to buy one.",
    "pokemon.buySuccess": "Congratulations! You've purchased a Pok√©mon named {pokemonName}!",
    "pokemon.buyFailure": "You don't have enough credits to buy a Pok√©mon.",
    "pokemon.feedSuccess": "You fed your {pokemonName}! Its level has increased to {newLevel}.",
    "pokemon.feedFailure": "You don't have any Pok√©mon to feed.",
    "pokemon.checkStatus": "Pok√©mon Name: {pokemonName}\nLevel: {pokemonLevel} üÜô\nPower Level: {pokemonPower} ‚¨ÜÔ∏è\nPokemon Value: ‚Ç±{pokemonValue} ü™ô",
    "pokemon.menuOptions": "‚ó¶‚ù≠‚ùØ‚ù±„ÄêPok√©mon Battle Game„Äë‚ù∞‚ùÆ‚ù¨‚ó¶\n\n1. `pokemon battle` ¬ª Start a battle with your Pok√©mon.\n2. `pokemon list` ¬ª List available Pok√©mon names.\n3. `pokemon buy <Pok√©mon name>` ¬ª Buy Pok√©mon.\n4. `pokemon feed` ¬ª Feed your Pok√©mon.\n5. `pokemon check` ¬ª Check your Pok√©mon information.\n6. `pokemon challenge @user` ¬ª Challenge another user to a Pok√©mon battle.\n7. `pokemon trade @user` ¬ª Trade Pok√©mon with another user.\n8. `pokemon accept @user` ¬ª Accept the trade from another user.\n9. `pokemon collect` ¬ª Collect the increased value of your Pok√©mon.\n10. `pokemon release` ¬ª To release your current Pok√©mon."
  },
  "vi_VN": {
    "pokemon.battleWin": "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë√°nh b·∫°i {opponent} v√† chi·∫øn th·∫Øng!",
    "pokemon.challenge": "B·∫°n ƒë√£ th√°ch ƒë·∫•u {opponent} trong tr·∫≠n Pok√©mon! ƒê·∫∑t c∆∞·ª£c c·ªßa b·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng `pokemon challenge @user <s·ªë ti·ªÅn c∆∞·ª£c>`.",
    "pokemon.noPok√©mon": "B·∫°n kh√¥ng c√≥ b·∫•t k·ª≥ Pok√©mon n√†o. S·ª≠ d·ª•ng `pokemon buy` ƒë·ªÉ mua m·ªôt con.",
    "pokemon.buySuccess": "Xin ch√∫c m·ª´ng! B·∫°n ƒë√£ mua m·ªôt con Pok√©mon t√™n l√† {pokemonName}!",
    "pokemon.buyFailure": "B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ mua m·ªôt con Pok√©mon.",
    "pokemon.feedSuccess": "B·∫°n ƒë√£ cho ƒÉn {pokemonName}! C·∫•p ƒë·ªô c·ªßa n√≥ ƒë√£ tƒÉng l√™n th√†nh {newLevel}.",
    "pokemon.feedFailure": "B·∫°n kh√¥ng c√≥ b·∫•t k·ª≥ Pok√©mon n√†o ƒë·ªÉ cho ƒÉn.",
    "pokemon.checkStatus": "T√™n Pok√©mon: {pokemonName}\nC·∫•p ƒë·ªô: {pokemonLevel} üÜô\nS·ª©c m·∫°nh: {pokemonPower} ‚¨ÜÔ∏è\nGi√° tr·ªã Pok√©mon: ‚Ç±{pokemonValue} ü™ô",
    "pokemon.menuOptions": "‚ó¶‚ù≠‚ùØ‚ù±„ÄêTr√≤ Ch∆°i Pok√©mon„Äë‚ù∞‚ùÆ‚ù¨‚ó¶\n\n1. `pokemon battle` ¬ª B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u v·ªõi Pok√©mon c·ªßa b·∫°n.\n2. `pokemon list` ¬ª Li·ªát k√™ t√™n Pok√©mon c√≥ s·∫µn.\n3. `pokemon buy` ¬ª Mua Pok√©mon.\n4. `pokemon feed` ¬ª Cho ƒÉn cho Pok√©mon c·ªßa b·∫°n.\n5. `pokemon check` ¬ª Xem th√¥ng tin Pok√©mon c·ªßa b·∫°n.\n6. `pokemon challenge @user` ¬ª Th√°ch ƒë·∫•u m·ªôt ng∆∞·ªùi d√πng kh√°c trong tr·∫≠n Pok√©mon.\n7. `pokemon trade @user` ¬ª Giao d·ªãch Pok√©mon v·ªõi ng∆∞·ªùi d√πng kh√°c.\n8. `pokemon accept @user` ¬ª Ch·∫•p nh·∫≠n giao d·ªãch t·ª´ ng∆∞·ªùi d√πng kh√°c.\n9. `pokemon collect` ¬ª Thu th·∫≠p gi√° tr·ªã tƒÉng th√™m c·ªßa Pok√©mon c·ªßa b·∫°n.\n10. `pokemon release` ¬ª Th·∫£ Pok√©mon hi·ªán t·∫°i c·ªßa b·∫°n."
  },
  // Add translations for other languages if needed
};

const valueIncreaseInterval = 3 * 60 * 1000; // 3 minutes in milliseconds
const battleCooldownDuration = 30 * 1000; // 2 minutes in milliseconds

setInterval(() => {
  for (const [userID, userPokemon] of userPok√©mon.entries()) {
    const increaseAmount = 30000; // Value increase amount
    // Increase the value of the Pok√©mon
    userPokemon.value = (userPokemon.value || 0) + increaseAmount;
  }

  const currentTime = Date.now();
  for (const [userID, lastBattleTime] of lastBattleTimestamps.entries()) {
    if (currentTime - lastBattleTime >= battleCooldownDuration) {
      lastBattleTimestamps.delete(userID); // Reset cooldown
    }
  }
  
  saveUserPok√©mon(); // Save the updated values
}, valueIncreaseInterval);

const pokemonNames = ["Pikachu", "Charmander", "Marill", "Squirtle", "Bulbasaur", "Meowth", "Vulpix", "Growlithe", "Vaporeon", "Sylveon", "Cyndaquil", "Totodile", "Piplup", "Froakie"];
const pokemonImages = [
  "https://i.imgur.com/ubgz6BV.jpg",
  "https://i.imgur.com/VProBXh.png",
  "https://i.imgur.com/nWW89IE.png",
  "https://i.imgur.com/P6hqkF8.png",
  "https://i.imgur.com/euJWYgU.png",
  "https://i.imgur.com/FORB3IB.jpg",
  "https://i.imgur.com/wkIjaxK.jpg",
  "https://i.imgur.com/Ab9FEkd.jpg",
  "https://i.imgur.com/0wJNEPw.png",
  "https://i.imgur.com/lvYgtKZ.png",
  "https://i.imgur.com/DHfXXpD.jpg",
  "https://i.imgur.com/zOsaStd.jpg",
  "https://i.imgur.com/RnLUht5.jpg",
  "https://i.imgur.com/AZH78aA.jpg"
];

let lastBattleTimestamps = new Map();
let tradeRequests = new Map();
let lastFeedTimestamps = new Map();
let userPok√©mon = new Map();
const PATH = join(global.assetsPath, 'user_pokemon.json');

function loadUserPok√©mon() {
  try {
    const data = fs.readFileSync(PATH, 'utf8');
    const parsedData = JSON.parse(data);
    userPok√©mon = new Map(parsedData.userPok√©mon);
    lastFeedTimestamps = new Map(parsedData.lastFeedTimestamps);
  } catch (err) {
    console.error('Ko th·ªÉ load d·ªØ li·ªáu pokemon ng∆∞·ªùi d√πng', err);
  }
}

function saveUserPok√©mon() {
  try {
    const data = JSON.stringify({
      userPok√©mon: Array.from(userPok√©mon),
      lastFeedTimestamps: Array.from(lastFeedTimestamps)
    });
    fs.writeFileSync(PATH, data, 'utf8');
  } catch (err) {
    console.error('Th·∫•t b·∫°i l∆∞u d·ªØ li·ªáu pokemon ng∆∞·ªùi d√πng', err);
  }
}

function calculatePokemonPower(level) {
  // Assume some attributes that contribute to power
  const basePower = 10; // A base power value
  const levelMultiplier = 5; // A multiplier based on level
  const otherAttributes = 2; // Additional attributes that contribute to power

  // Calculate the power using the attributes
  const power = basePower + (level * levelMultiplier) + otherAttributes;

  return power;
}

loadUserPok√©mon();

async function onCall({ message, getLang, args }) {
  const { Users } = global.controllers;
  const pokemonImage = (await axios.get("https://i.imgur.com/DwnkPFD.png", {
    responseType: "stream"
  })).data;
  const battleCheckingGif = (await axios.get("https://i.imgur.com/vdgFO0w.gif", {
    responseType: "stream"
  })).data;
  const battle = (await axios.get("https://i.imgur.com/fZgCYe2.gif", {
    responseType: "stream"
  })).data;
  const levelup = (await axios.get("https://i.imgur.com/VIp6w8l.gif", {
    responseType: "stream"
  })).data;

  if (!message || !message.body) {
    console.error('Invalid message object or message body!');
    return;
  }

  const { senderID, mentions } = message;
  const mentionedUserID = Object.keys(mentions)[0]; // Get the user ID of the mentioned user
  const mentionedUser = await global.controllers.Users.getInfo(mentionedUserID); // Retrieve mentioned user's information

  if (args.length === 0 || args[0] === "menu") {
    const menuOptions = getLang("pokemon.menuOptions");
    return message.reply({
      body: menuOptions,
      attachment: pokemonImage
    });
  }

  if (args[0] === "buy") {
    if (userPok√©mon.has(senderID)) {
      return message.reply("B·∫°n ƒë√£ c√≥ Pok√©mon.  N·∫øu b·∫°n mu·ªën c√≥ m·ªôt c√°i m·ªõi, b·∫°n c√≥ th·ªÉ th·∫£ Pok√©mon hi·ªán t·∫°i c·ªßa m√¨nh b·∫±ng c√°ch s·ª≠ d·ª•ng `pokemon release`.");
    }
  
    const pokemonPrice = 100000;
    const userBalance = await Users.getMoney(senderID);
  
    if (userBalance < pokemonPrice) {
      return message.reply(getLang("pokemon.buyFailure"));
    }
  
    const requestedPokemonName = args[1].toLowerCase(); // Convert to lowercase
    const pokemonIndex = pokemonNames.findIndex(name => name.toLowerCase() === requestedPokemonName);
  
    if (pokemonIndex === -1) {
      return message.reply(`Xin l·ªói, m·∫∑t h√†ng Pok√©mon "${args[1]}" hi·ªán kh√¥ng kh·∫£ d·ª•ng.`);
    }
  
    const randomPokemonName = pokemonNames[pokemonIndex];
    const randomPokemonImageURL = pokemonImages[pokemonIndex];
  
    const imageResponse = await axios.get(randomPokemonImageURL, {
      responseType: "stream"
    });
  
    await Users.decreaseMoney(senderID, pokemonPrice);
    userPok√©mon.set(senderID, { name: randomPokemonName, level: 1 });
    saveUserPok√©mon();
  
    const buySuccessMessage = getLang("pokemon.buySuccess").replace("{pokemonName}", randomPokemonName);
  
    return message.reply({
      body: buySuccessMessage,
      attachment: imageResponse.data
    });
  }

  if (args[0] === "feed") {
    if (!userPok√©mon.has(senderID)) {
      return message.reply(getLang("pokemon.feedFailure"));
    }

    const userPokemon = userPok√©mon.get(senderID);
    const currentLevel = userPokemon.level;
    const maxLevel = 10; // Assuming the maximum level is 10

    if (currentLevel >= maxLevel) {
      return message.reply("Pokemon c·ªßa b·∫°n ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa!");
    }

    const lastFeedTime = lastFeedTimestamps.get(senderID) || 0;
    const currentTime = Date.now();
    const cooldownDuration = 3 * 60 * 60 * 1000; // 3 hours in milliseconds

    const timeSinceLastFeed = currentTime - lastFeedTime;

    if (timeSinceLastFeed < cooldownDuration) {
      const remainingCooldown = cooldownDuration - timeSinceLastFeed;
      const remainingCooldownHours = Math.floor(remainingCooldown / (60 * 60 * 1000));
      const remainingCooldownMinutes = Math.ceil((remainingCooldown % (60 * 60 * 1000)) / (60 * 1000));

      return message.reply(`Pok√©mon c·ªßa b·∫°n ƒë√£ ƒë·∫ßy v√† c·∫ßn th·ªùi gian ƒë·ªÉ ti√™u h√≥a.  B·∫°n c√≥ th·ªÉ cho n√≥ ƒÉn l·∫°i ${remainingCooldownHours} gi·ªù v√† ${remainingCooldownMinutes} ph√∫t.`);
    }

    // Increase the Pok√©mon's level by 1
    userPokemon.level += 1;
    saveUserPok√©mon();

    // Update the last feed timestamp
    lastFeedTimestamps.set(senderID, currentTime);

    const feedSuccessMessage = getLang("pokemon.feedSuccess")
      .replace("{pokemonName}", userPokemon.name)
      .replace("{newLevel}", userPokemon.level);

    return message.reply({
      body: feedSuccessMessage,
      attachment: levelup
    });
  }

  if (args[0] === "check") {
    if (!userPok√©mon.has(senderID)) {
      return message.reply(getLang("pokemon.noPok√©mon"));
    }

    const userPokemon = userPok√©mon.get(senderID);
    const checkStatusMessage = getLang("pokemon.checkStatus")
      .replace("{pokemonName}", userPokemon.name)
      .replace("{pokemonLevel}", userPokemon.level)
      .replace("{pokemonPower}", calculatePokemonPower(userPokemon.level)) // Display power here
      .replace("{pokemonValue}", userPokemon.value || 0); // Display value here

    const pokemonIndex = pokemonNames.indexOf(userPokemon.name);
    if (pokemonIndex !== -1) {
      const pokemonImageURL = pokemonImages[pokemonIndex];
      const imageResponse = await axios.get(pokemonImageURL, {
        responseType: "stream"
      });

      return message.reply({
        body: checkStatusMessage,
        attachment: imageResponse.data
      });
    } else {
      return message.reply(checkStatusMessage);
    }
  }

  if (args[0] === "list") {
    const availablePok√©monList = pokemonNames.map(name => `‚Ä¢ ${name}`).join("\n");
    const listMessage = `ƒê√¢y l√† danh s√°ch c√°c Pok√©mon c√≥ s·∫µn\n\n${availablePok√©monList}`;
    return message.reply(listMessage);
  }


  if (args[0] === "battle") {
    if (!userPok√©mon.has(senderID)) {
      return message.reply(getLang("pokemon.noPok√©mon"));
    }
  
    if (args.length < 2) {
      return message.reply("Vui l√≤ng ch·ªâ ƒë·ªãnh s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c cho tr·∫≠n chi·∫øn.");
    }
  
    // Check cooldown for battles
    const lastBattleTime = lastBattleTimestamps.get(senderID) || 0;
    const currentTime = Date.now();
    const battleCooldownDuration = 2 * 60 * 1000; // 2 minutes in milliseconds
  
    if (currentTime - lastBattleTime < battleCooldownDuration) {
      const remainingCooldown = battleCooldownDuration - (currentTime - lastBattleTime);
      const remainingMinutes = Math.ceil(remainingCooldown / (60 * 1000));
  
      return message.reply(`B·∫°n ph·∫£i ƒë·ª£i ${remainingMinutes} tr∆∞·ªõc khi g·∫° ti·∫øp.`);
    }
  
    const betAmount = parseFloat(args[1]);
  
    if (isNaN(betAmount)) {
      return message.reply("S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c kh√¥ng h·ª£p l·ªá.  Vui l√≤ng cung c·∫•p s·ªë ti·ªÅn h·ª£p l·ªá.");
    }
  
    const userBalance = await Users.getMoney(senderID);
  
    if (betAmount > userBalance) {
      return message.reply("B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c");
    }
  
    // Update last battle timestamp
    lastBattleTimestamps.set(senderID, currentTime);
  
    const opponentPok√©monLevel = Math.floor(Math.random() * 10) + 1; // Generate a random level for the opponent's Pok√©mon
    const userPok√©monLevel = userPok√©mon.get(senderID).level;
  
    const battleResult = userPok√©monLevel > opponentPok√©monLevel;
    const battleResultMessage = battleResult
      ? `Ch√∫c m·ª´ng!  Pok√©mon c·ªßa b·∫°n ƒë√£ ƒë√°nh b·∫°i Pok√©mon c·ªßa ƒë·ªëi th·ªß.  \n‚Äï B·∫°n ƒë√£ th·∫Øng ${betAmount}!.`
      : `√îi kh√¥ng!  Pok√©mon c·ªßa b·∫°n ƒë√£ b·ªã ƒë√°nh b·∫°i b·ªüi Pok√©mon c·ªßa ƒë·ªëi th·ªß.  \n‚Äï B·∫°n ƒë√£ thuat ${betAmount}!.`;
  
    // Update user balance based on battle outcome
    if (battleResult) {
      await Users.increaseMoney(senderID, betAmount);
    } else {
      await Users.decreaseMoney(senderID, betAmount);
    }
  
    const battleCheckingMessage = await message.reply({
      body: "Ki·ªÉm tra k·∫øt qu·∫£ ƒë·∫•u..",
      attachment: battle
    });
  
    setTimeout(() => {
      message.reply(battleResultMessage);
      if (global.api && global.api.unsendMessage) {
        global.api.unsendMessage(battleCheckingMessage.messageID);
      }
    }, 3000);
  
    return;
  }

  if (args[0] === "challenge") {
    if (!mentionedUser) {
      return message.reply("B·∫°n c·∫ßn tag ng∆∞·ªùi d√πng ƒë·ªÉ g·∫°.");
    }

    if (!userPok√©mon.has(senderID)) {
      return message.reply(getLang("pokemon.noPok√©mon"));
    }

    if (!userPok√©mon.has(mentionedUserID)) {
      return message.reply(`${mentionedUser.name} kh√¥ng c√≥ pokemon ƒë·ªÉ ƒë·∫•u`);
    }

    let betAmount = parseFloat(args[args.length - 1]); // Changed the index to -1

    if (isNaN(betAmount) || betAmount <= 0) {
      return message.reply("S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c kh√¥ng h·ª£p l·ªá.  Vui l√≤ng cung c·∫•p s·ªë ti·ªÅn h·ª£p l·ªá.");
    }

    const userBalance = await Users.getMoney(senderID);

    if (betAmount > userBalance) {
      return message.reply("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c.");
    }

    const challengeMessage = getLang("pokemon.challenge").replace("{opponent}", mentionedUser.name);

    const senderInfo = await global.controllers.Users.getInfo(senderID); // Get sender's information
    const checkingMessage = await message.reply({
      body: "Ki·ªÉm tra k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u...",
      attachment: battleCheckingGif
    });

    setTimeout(async () => {
      const challengeResult = Math.random() < 0.1; // 10% chance of success
      const winAmount = betAmount * 2;

      if (challengeResult) {
        await Users.increaseMoney(senderID, winAmount);
        await Users.decreaseMoney(mentionedUserID, betAmount);
      } else {
        await Users.decreaseMoney(senderID, betAmount);
        await Users.increaseMoney(mentionedUserID, betAmount);
      }

      const challengeResultMessage = challengeResult
        ? `Ch√∫c m·ª´ng!  Pok√©mon c·ªßa b·∫°n ƒë√£ th·∫Øng v·ªõi ${mentionedUser.name}'s Pok√©mon.\n‚Äï B·∫°n ƒë√£ h√∫p ‚Ç±${winAmount}. ü™ô`
        : `Pok√©mon c·ªßa b·∫°n ƒë√£ thua ${mentionedUser.name}'s Pok√©mon.\n‚Äï B·∫°n b·ªã n√≥ nu·ªët ‚Ç±${betAmount}.`;

      await message.reply(challengeResultMessage);

      if (global.api && global.api.unsendMessage) {
        await global.api.unsendMessage(checkingMessage.messageID);
      }
    }, 4000);

    return;
  }

  if (args[0] === "trade") {
    if (!mentionedUser) {
      return message.reply("B·∫°n c·∫ßn tag ng∆∞·ªùi mu·ªën trao ƒë·ªïi.");
    }

    if (!userPok√©mon.has(senderID)) {
      return message.reply(getLang("pokemon.noPok√©mon"));
    }

    if (!userPok√©mon.has(mentionedUserID)) {
      return message.reply(`Ng∆∞·ªùi d√πng ${mentionedUser.name} kh√¥ng c√≥ pokemon ƒë·ªÉ trao ƒë·ªïi`);
    }

    tradeRequests.set(mentionedUserID, senderID); // Store the trade request with the target user's ID

    return message.reply(`Giao d·ªãch trao ƒë·ªïi v·ªõi ${mentionedUser.name}. Ng∆∞·ªùi d√πng kh√°c ph·∫£i g√µ "pokemon accept" ƒë·ªÉ x√°c nh·∫≠n.`);
  }

  if (args[0] === "accept") {
    if (!tradeRequests.has(senderID)) {
      return message.reply("Kh√¥ng c√≥ y√™u c·∫ßu trao ƒë·ªïi.");
    }

    const initiatorID = tradeRequests.get(senderID);
    if (initiatorID !== mentionedUserID) {
      return message.reply("Kh√¥ng c√≥ y√™u c·∫ßu trao ƒë·ªïi t·ª´ ng∆∞·ªùi d√πng n√†y.");
    }

    // Swap Pok√©mon between the users
    const userPokemon = userPok√©mon.get(senderID);
    const mentionedUserPokemon = userPok√©mon.get(mentionedUserID);
    userPok√©mon.set(senderID, mentionedUserPokemon);
    userPok√©mon.set(mentionedUserID, userPokemon);
    saveUserPok√©mon();

    tradeRequests.delete(senderID); // Clear the trade request

    return message.reply(`Trao ƒë·ªïi th√†nh c√¥ng! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${mentionedUser.name}'s Pok√©mon.`);
  }

  if (args[0] === "collect") {
    if (!userPok√©mon.has(senderID)) {
      return message.reply(getLang("pokemon.noPok√©mon"));
    }

    const userPokemon = userPok√©mon.get(senderID);
    if (!userPokemon.value || userPokemon.value === 0) {
      return message.reply("Kh√¥ng c√≥ ti·ªÅn ƒë·ªÉ thu th·∫≠p cho Pok√©mon c·ªßa b·∫°n.");
    }

    const userBalance = await Users.getMoney(senderID);
    const collectAmount = userPokemon.value;

    await Users.increaseMoney(senderID, collectAmount);
    userPokemon.value = 0; // Reset the collected value
    saveUserPok√©mon();

    const collectMessage = `B·∫°n ƒë√£ ƒÉn ch·∫∑n ƒë∆∞·ª£c ‚Ç±${collectAmount} ti·ªÅn t·ª´ pokemon c·ªßa b·∫°n`;
    return message.reply(collectMessage);
  }

  if (args[0] === "release") {
    if (!userPok√©mon.has(senderID)) {
      return message.reply("B·∫°n kh√¥ng c√≥ pokemon ƒë·ªÉ th·∫£.");
    }

    // Remove the user's current Pok√©mon
    userPok√©mon.delete(senderID);
    saveUserPok√©mon();

    const releaseMessage = "B·∫°n ƒë√£ th·∫£ Pok√©mon c·ªßa m√¨nh.  B√¢y gi·ªù b·∫°n c√≥ th·ªÉ mua m·ªôt c√°i m·ªõi b·∫±ng c√°ch s·ª≠ d·ª•ng `pokemon buy`.";
    return message.reply(releaseMessage);
  }

  // If the command is not recognized, show the menu
  const menuOptions = getLang("pokemon.menuOptions");
  return message.reply(menuOptions);
}

export default {
  config,
  langData,
  onCall
};